#!/bin/bash
# SPDX-License-Identifier: Apache-2.0
# Copyright (C) 2025 OKTET Labs Ltd. All rights reserved.

set -u

TO_REVERT=""
MESSAGE=""
DO_EDIT=true
CONFLICT_MODE=""
EMERGENCY=""

if [[ -z "$(stg series -A 2>/dev/null)" ]]; then
    USE_STGIT=
else
    USE_STGIT=true
fi

function show_usage ()
{
    cat <<EOF
Usage: $0 [-m MSG | --message=MSG | -F MSGFILE | --file=MSGFILE]
          [--no-edit] [--no-stgit | --stgit] COMMIT-ID

Revert a commit specified by COMMIT-ID and make a commit message
conforming to TE Contributor Guidelines.

--message=MSG
-m MSG           Provide a commit description.

--file=MSGFILE   Read a commit description from MSGFILE.
-F MSGFILE

--emergency=MSG  Specify that a rollback commit is an emergency,
                 providing MSG as a justification.

--no-edit        Do not invoke interactive editor after making
                 the commit message draft.

--no-stgit       Do not use stgit even on stgit-enabled branches.

--stgit          Use stgit even if it is not auto-detected.

--abort          Abort a pending revert with conflicts.

--continue       Finalize a pending revert after all conflicts
                 have been resolved.
EOF
}

while [[ "$#" -gt 0 ]]; do
    case "${1}" in
        -h | --help)
            show_usage
            exit 0
            ;;
        -F|--file)
            shift
            MESSAGE="$(< "$1")"
            ;;
        -F*)
            MESSAGE="$(< "${1#-F}")"
            ;;
        --file=*)
            MESSAGE="$(< "${1#--file=}")"
            ;;
        -m|--message)
            shift
            MESSAGE="$1"
            ;;
        -m*)
            MESSAGE="${1#-m}"
            ;;
        --message=*)
            MESSAGE="${1#--message=}"
            ;;
        --emergency=*)
            EMERGENCY="${1#--emergency=}"
            ;;
        --no-edit)
            DO_EDIT=
            ;;
        --no-stgit)
            USE_STGIT=
            ;;
        --stgit)
            USE_STGIT=true
            ;;
        --continue)
            CONFLICT_MODE="continue"
            ;;
        --abort)
            CONFLICT_MODE="abort"
            ;;
        -*)
            echo "Unknown option $1" >&2
            show_usage
            exit 1
            ;;
        *)

            if [[ -n "${TO_REVERT}" ]]; then
                echo "Only a single commit may be reverted" >&2
                exit 1
            fi
            TO_REVERT="$1"
            ;;
    esac
    shift
done

case "${CONFLICT_MODE}" in
    "")
        if [[ -z "${TO_REVERT}" ]]; then
            echo "No commit to revert is specified" >&2
            exit 1
        fi

        if [[ -f "$(git rev-parse --git-path REVERT_HEAD)" ]]; then
            echo "Revert already in progress, use --continue or --abort to finish it" >&2
            exit 1
        fi
        ;;

    "abort")
        if [[ -n "${TO_REVERT}" ]]; then
            echo "Cannot specify a revert commit with --abort" >&2
            exit 1
        fi
        if [[ ! -f "$(git rev-parse --git-path REVERT_HEAD)" ]]; then
            echo "No revert in progress, nothing to abort" >&2
            exit 1
        fi
        git revert --abort
        if [[ -n "${USE_STGIT}" ]]; then
            stg delete --top
        fi
        exit 0
        ;;

    "continue")
        if [[ -n "${TO_REVERT}" ]]; then
            echo "Cannot specify a revert commit with --continue" >&2
            exit 1
        fi
        if [[ ! -f "$(git rev-parse --git-path REVERT_HEAD)" ]]; then
            echo "No revert in progress, nothing to continue" >&2
            exit 1
        fi
        if [[ -n "$(git ls-files --unmerged)" ]]; then
            echo "There are still unmerged files, cannot proceed with the revert" >&2
            exit 1
        fi
        TO_REVERT="$(< "$(git rev-parse --git-path REVERT_HEAD)")"

        # That's right, here we quit the pending revert but the index
        # is left in a proper state which allows us to do a revert
        # commit manually
        git revert --quit || exit 1
        ;;
esac


subject="$(git log -1 --format='%s' "${TO_REVERT}")"
revert_subject="revert: ${subject#*: }"
fixes="Fixes: $(git log -1 --abbrev=12 --format='%h ("%s")' "${TO_REVERT}")"

full_message="${revert_subject}"
if [[ -n "${MESSAGE}" ]]; then
    full_message+=$'\n\n'
    full_message+="${MESSAGE}"
fi
full_message+=$'\n\n'
full_message+="${fixes}"
full_message+=$'\n'
if [[ -n "${EMERGENCY}" ]]; then
    full_message+="Urgency: emergency (${EMERGENCY})"
    full_message+=$'\n'
fi
author_email="$(git config user.email)"
signed_off="$(git config user.name) <${author_email,,}>"
full_message+="Signed-off-by: ${signed_off}"

if [[ -n "${USE_STGIT}" ]]; then
    if [[ -z "${CONFLICT_MODE}" ]]; then
        stg new -m "${full_message}" || exit 1
        git revert --no-commit "${TO_REVERT}" || exit 1
    fi
    stg refresh
    git revert --quit
    if [[ -n "${DO_EDIT}" ]]; then
        stg edit
        if [[ -z "$(git log -1 --format='%s' HEAD)" ]]; then
            echo "Empty commit message, aborting revert"
            stg delete --top
        fi
    fi
else
    if [[ -z "${CONFLICT_MODE}" ]]; then
        git revert --no-commit "${TO_REVERT}" || exit 1
    fi
    git commit --message="${full_message}" ${DO_EDIT:+--edit} || \
        git revert --abort
fi
