#!/bin/bash
# SPDX-License-Identifier: Apache-2.0
# Copyright (C) 2022-2023 OKTET Labs Ltd. All rights reserved.

set -u

TARGET_BRANCH="$(git rev-parse --symbolic --abbrev-ref '@{push}' 2>/dev/null)"
if [[ -z "${TARGET_BRANCH}" ]]; then
    TARGET_BRANCH="$(git rev-parse --symbolic --abbrev-ref '@{u}' 2>/dev/null)"
    if [[ -z "${TARGET_BRANCH}" ]]; then
        TARGET_BRANCH="$(git rev-parse --symbolic --abbrev-ref HEAD)"
    fi
fi
TARGET_BRANCH="${TARGET_BRANCH#*/}"
SINGLE="@{u}"

GIT_VERSION="$(git version)"
GIT_VERSION="${GIT_VERSION#git version }"
GIT_MAJOR="${GIT_VERSION%%.*}"
GIT_MINOR="${GIT_VERSION%.*}"
GIT_MINOR="${GIT_MINOR#*.}"

function require_modern_git ()
{
    [[ "${GIT_MAJOR}" -lt 2 \
           || "${GIT_MAJOR}" -eq 2 && "${GIT_MINOR}" -ge 31 ]] && return 0
    echo "The option ${1} requires Git >= 2.31," \
         "but ${GIT_VERSION} is installed" >&2
    exit 1
}

function require_git_notice ()
{
    [[ "${GIT_MAJOR}" -lt 2 \
           || "${GIT_MAJOR}" -eq 2 && "${GIT_MINOR}" -ge 31 ]] && return 0
    echo " (Git >= 2.31 is required, installed ${GIT_VERSION})"
}

function git_hook_option ()
{
    local name="$1"
    local value="$2"
    local n="${GIT_CONFIG_COUNT:-0}"

    export "GIT_CONFIG_KEY_${n}=hooks.${name}"
    export "GIT_CONFIG_VALUE_${n}=${value}"

    export GIT_CONFIG_COUNT=$((n + 1))
}

function print_usage ()
{
    cat <<EOF
Usage: $0 [--target=BRANCH] [-1 | --single] [--maintainer]
          [--option-NAME=VALUE] [--enable-NAME] [--disable-NAME]
          [--user-hooks] [--verbose]
          [REVISION | START-REV..END-REV]

This script checks the specified revisions against the same set of checks
that are used by TE's Git pre-push hook. The real hook behaviour is simulated
as much accurately as possible; in particular, all global and per-repository
hook options are honoured. The hook need not be installed.

Command-line hook options may also be simulated with --option, --enable and
--disable options$(require_git_notice). For example:

          $0 --enable-allownonascii HEAD

would perform the same set of checks as:

          git -c hooks.allownonascii=true push

The revision range may be specified in the following ways:

- explicit range START-REV..END-REV which checks the set of revisions as
  would be generated by git rev-list START-REV..END-REV;

- a single revision: --single REVISION;
  if a REVISION is omitted, HEAD is assumed;

- the whole branch from its upstream: REVISION;
  the REVISION must be a branch name in this case with a defined upstream;
  if a REVISION is omitted, the current branch is used.


 --target=BRANCH       Simulate a check for push to a given BRANCH
                       (default is ${TARGET_BRANCH})

 -1, --single          Check a single provided revision

 --maintainer          Perform checks in the maintainer mode
                      $(require_git_notice)

 --option-NAME=VALUE   Locally set a Git option hooks.NAME = VALUE
                      $(require_git_notice)

 --enable-NAME         Locally set a Git option hooks.NAME = true
                      $(require_git_notice)

 --disable-NAME        Locally set a Git option hooks.NAME = false
                      $(require_git_notice)

 --user-hooks          Run user-defined chained hooks as well
                       (may also be enabled with hooks.check-user-hooks option)

 --list-checks         List all available checks with detailed descriptions

 --list-config         List all available configuration options

 --verbose             Enable verbose checking
EOF
}

function list_checks ()
{
    sed -n 's/^[[:space:]]*### \?//p' \
        "$(dirname "$0")/../hooks/git-prepush-hook"
}

function list_config ()
{
    local name descr vals val pfx

    cat <<EOF
Configuration options may be set permanently in Git config files e.g.:

   git config --local hooks.allownonascii true

would allow non-ASCII characters in commits for the current repository.

For a one-shot action, options may be passed directly to git, e.g.:

   git -c hooks.push-maintainer=true push

would enable maintainer mode for this command invocation only.

--option-NAME=VALUE, --enable-NAME, --disable-NAME may be used
with $0 to override persistent option settings. $(require_git_notice)

For example:

          $0 --enable-allownonascii HEAD

would perform the same set of checks as:

          git -c hooks.allownonascii=true push

The supported options are:

EOF
    sed -n 's/^[[:space:]]*##! \?//p' \
        "$(dirname "$0")/../hooks/git-prepush-hook" | \
        while read -r name descr; do
            printf "%-40s %s\n" "hooks.${name}" "${descr}"
            vals="$(git config --get-all "hooks.${name}")"
            if [[ -n "${vals}" ]]; then
                pfx="Current value:"
                for val in ${vals}; do
                    printf "%-40s %14s %s\n" " " "${pfx}" "${val}"
                    pfx="-"
                done
            fi
        done
}


FROM=
TO=
USERHOOKS="$(git config --type bool --default false \
                        --get hooks.check-user-hooks)"

for arg; do
    case "${arg}" in
        -h | --help)
            print_usage
            exit 0
            ;;
        -l | --list-checks)
            list_checks
            exit 0
            ;;
        --list-config)
            list_config
            exit 0
            ;;
        --target=*)
            TARGET_BRANCH="${arg#--target=}"
            ;;
        --wip)
            TARGET_BRANCH="user/${LOGNAME}/private"
            ;;
        -1 | --single)
            SINGLE="^"
            ;;
        --maintainer)
            require_modern_git "${arg}"
            git_hook_option push-maintainer true
            ;;
        --option-*=*)
            require_modern_git "${arg}"
            arg="${arg#--option-}"
            git_hook_option "${arg%%=*}" "${arg#*=}"
            ;;
        --enable-*)
            require_modern_git "${arg}"
            git_hook_option "${arg#--enable-}" true
            ;;
        --disable-*)
            require_modern_git "${arg}"
            git_hook_option "${arg#--enable-}" false
            ;;
        --user-hooks)
            USERHOOKS=true
            ;;
        --verbose)
            export PUSH_VERBOSE_CHECKS=true
            ;;
        -*)
            echo "Unknown option ${arg}" >&2
            print_usage
            exit 1
            ;;
        *..*)
            if [[ -n "${TO}" ]]; then
                echo "The revision is already specified" >&2
                exit 1
            fi
            FROM="${arg%..*}"
            TO="${arg#*..}"
            ;;
        *)
            if [[ -n "${TO}" ]]; then
                echo "The revision is already specified" >&2
                exit 1
            fi
            TO="${arg}"
            ;;
    esac
done

[[ -z "${TO}" ]] && TO="HEAD"

[[ -z "${FROM}" ]] && FROM="${TO}${SINGLE}"

if [[ "${USERHOOKS}" == "true" ]]; then
    checker="$(git rev-parse --show-toplevel)/.git/hooks/pre-push"
else
    checker="$(dirname "$0")/../hooks/git-prepush-hook"
fi

echo "fake ${TO} refs/heads/${TARGET_BRANCH} ${FROM}" | "${checker}"
