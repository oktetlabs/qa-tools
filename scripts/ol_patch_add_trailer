#!/bin/bash
# SPDX-License-Identifier: Apache-2.0
# Copyright (C) 2025 OKTET Labs Ltd. All rights reserved.

set -u

declare -a TRAILER_ARGS
declare -a PATCH_TRAILER_ARGS
declare -a PATCHES

TRAILER_ARGS=()
PATCH_TRAILER_ARGS=()
PATCHES=()

USE_STGIT="$(git config --get --type bool --default true \
                 add-trailer.use-stgit)"
USE_LDAP="$(git config --get --type bool --default true \
                 add-trailer.use-ldap)"
DRYRUN=
SINGLE="$(git config --get --type bool --default false \
               add-trailer.single)"
VERBOSE="$(git config --get --type bool --default false \
                 add-trailer.verbose)"
GUESS_FIXES=
DO_REORDER=

declare -A TRAILER_MAP=([--reviewed-by]=Reviewed-by
                        [--acked-by]=Acked-by
                        [--tested-by]=Tested-by
                        [--reported-by]=Reported-by
                        [--suggested-by]=Suggested-by)

function show_usage ()
{
    local full="${1:-}"
    cat <<EOF
Usage: $0 [-rUSER | --reviewed-by=USER | --acked-by=USER |
           --tested-by=USER | --suggested-by=USER |
           -s | --signoff | --coauthor |
           --redmine-id=ID | --github-id=ID | --link=URL |
           --breaks=TEXT | --fixes=REV |
           --trailer=NAME:VALUE | --delete=TRAILER | -dTRAILER]...
          [-1 | --single] [--stgit | --no-stgit] [--ldap | --no-ldap]
          [-n | --dry-run] [--verbose] $([[ -z "${full}" ]] && \
                                         echo "[--full-help]")
          [PATCH-SPEC..]

Add or delete a set of trailers to a series of patches.

If the current branch is managed by stgit and --no-stgit is not given,
stgit is used to update patches and PATCH-SPECs are treated as stgit
patch names.

Otherwise PATCH-SPECs are treated as Git revisions. $([[ -n "${full}" ]] && \
echo "The tool creates
a temporary tag pointing to the current HEAD, resets the HEAD to the
first revision to update and then applies all revisions up to the
original HEAD modifying commit messages as necessary.
In this case PATCH-SPECs may be a series of revision specifiers or
a single range specifier REV1..REV2.")

If no PATCH-SPEC is provided, all patches from the current branch
are operated upon, unless --single is also specified, in which case
only the latest patch is affected.

The tool may modify an arbitrary number of trailers in one pass.

Reviewed-by, Acked-by, Tested-by, Reported-by, Suggested-by,
OL-Redmine-Id, GitHub-TE-Id may be copied from an existing revision
by using @ prefix, e.g.:

   $0 --redmine-id=@HEAD^ HEAD

would set the value of OL-Redmine-Id of the topmost patch to that of
its parent.

EOF

    if [[ -z "${full}" ]]; then
        echo "Described below are the most common options."
        echo "Use $0 --full-help to see all of them."
        echo ""
    fi

    cat <<EOF
--full-help         Show descriptions of all options.

-rUSER,
--reviewed-by=USER  Add a Reviewed-by trailer for a given USER.

                    A USER shall be either a string of the form:

                          Firstname Lastname <email@example.com>

                    or a user account id, in which case LDAP is
                    used to detect the correct name and e-mail.
                    This behaviour can be disabled by using --no-ldap
                    option.

--acked-by=USER,
--tested-by=USER,
--reported-by=USER,
--suggested-by=USER Similiar to --reviewed-by, but the added trailer
                    is different.

-s, --signoff       Add a Signed-off-by trailer for the current Git user.

--coauthor          Add a Co-developed-by and Signed-off-by trailers for
                    the current Git user.

--coauthor=USER     Add a Co-developed-by and Signed-off-by trailers for
                    a given user. Note that if the patch is already
                    signed off by the patch author, the resulting order
                    of trailers may be rejected by ol_check_patches, so
                    it's recommended to apply this option to unsigned
                    patches and the specify --signoff, or use --reorder.

--redmine-id=ID     Add an OL-Redmine-Id trailer with a given issue ID.

--github-id=ID      Add a GitHub-TE-Id trailer with a given ID.

--fixes=REV         Add a properly formatted Fixes trailer for a given
                    Git revision REV. Implies --single.

--fixes-private=REV Same as --fixes, but adds a Fixes-Private trailer.

--guess-fixes       Try to guess required Fixes trailers for each revision.
                    Note that it does not always guess correctly, so manual
                    post-editing may still be needed.

--link=URL          Add a Link trailer with a given URL (e.g. pointing to
                    a GitHub review request).

--reorder           Reorder trailers to comply with the order requirements
                    of Contributor's Guidelines. It can also fix torn-off
                    trailers.

EOF

    [[ -z "${full}" ]] && return 0
    cat <<EOF
--urgency=LEVEL[:MESSAGE]
                    Add an Urgency trailer with a given LEVEL and an optional
                    explanatory MESSAGE. The level is one of:
                        low, medium, high, emergency or critical.

--ref=REV           Add a Ref trailer to reference another commit, probably in
                    another repository. Implies --single.

                    The argument may take one of the two
                    forms:
                        - any form of local Git revision (as e.g. with --fixes);
                          in this case a properly formatted trailer is
                          automatically constructed;

                        - an inter-repository reference of the form:
                             ORGANIZATION/REPOSITORY@HASH ("SUBJECT LINE");
                          in this case the complete trailer line shall be
                          provided by the user, because the script has no way to
                          infer it.

--breaks=TEXT       Adds a Breaks trailer with a given TEXT.
                    Implies --single.

--trailer=NAME:VALUE
                    Add a custom trailer NAME with a given VALUE.

-dTRAILER,
--delete=TRAILER    Delete a given TRAILER

-1, --single        Operate on the topmost commit only if no explicit
                    revisions are specified. The option has no effect
                    if any revisions are provided in the command line
                    explicitly.

                    The option may be set permanently by using
                    Git option:
                         add-trailer.single=true

--stgit             Detect stgit-managed branches and use stgit commands
                    for them. This is the default.

--no-stgit          Use raw Git commands even on stgit-managed branches
                    Stgit may be disabled permanently by setting
                    Git option:
                        add-trailer.use-stgit=false

--ldap              Use LDAP to resolve user ids. This is the default.

--no-ldap           Do not try to use LDAP.
                    LDAP may be disabled permanently by setting
                    Git option add-trailer.use-ldap=false

--dry-run, -n       Do not perform commands, only show what is going
                    to be done.

--verbose           Turn on verbose messages. It may also be turned on
                    permanently by setting Git option
                        add-trailer.verbose=true

--abort             Clean up the branch after a failed $0.
                    Not applicable to stgit-managed branches.

EOF
}

function this_user ()
{
    local name
    local email

    name="$(git config --get user.name)"
    email="$(git config --get user.email)"
    echo "${name} <${email,,}>"
}

function maybe_copy_trailer ()
{
    local trailer="$1"
    local value="$2"

    case "${value}" in
        @*)
            git log -1 --format="%(trailers:key=${trailer},valueonly)" "${value#@}"
            ;;
        *)
            echo "${value}"
        ;;
    esac
}

function map_user ()
{
    local id="$1"
    local mapped

    #shellcheck disable=SC2001
    case "${id}" in
        [[:upper:]]*\ [[:upper:]]*\ \<[[:alnum:]]*@[[:alnum:]]*\>)
            echo "${id}" | sed 's/<[^>]*>/\L&/'
            ;;
        [[:lower:]]*)
            if [[ "${USE_LDAP}" != "true" ]]; then
                echo "Cannot map user ids without LDAP"
                exit 1
            fi
            mapped="$(ldapsearch "(uid=${id})" givenName sn mail 2>/dev/null | \
                      awk '$1 == "givenName:" { GIVEN_NAME = $2 }
                           $1 == "sn:" { SURNAME = $2 }
                           $1 == "mail:" { MAIL = tolower($2) }
                           END {
                               if (GIVEN_NAME && SURNAME && MAIL)
                                   printf "%s %s <%s>", GIVEN_NAME, SURNAME, MAIL
                           }')"
            if [[ -z "${mapped}" ]]; then
                echo "User id '${id}' cannot be resolved" >&2
                exit 1
            fi
            echo "${mapped}"
            ;;
        *)
            echo "Invalid syntax for user: ${id}" >&2
            exit 1
            ;;
    esac
}

function verbose ()
{
    if [[ "${VERBOSE}" == "true" ]]; then
        echo "$*" >&2
    fi
}

function restore_branch ()
{
    local status
    local oldhead

    if [[ -z "${DRYRUN}" ]]; then
        if ! oldhead="$(git rev-parse add_trailer_oldhead >&2)"; then
            echo "No trailer adding in progress" >&2
            exit 1
        fi
    else
        oldhead="$(git rev-parse HEAD)"
    fi
    status="${1:-$?}"
    if [[ "${status}" -ne 0 ]]; then
        verbose "Reverting the branch to ${oldhead}"
        ${DRYRUN} git reset --hard add_trailer_oldhead
    fi
    ${DRYRUN} git tag --delete add_trailer_oldhead
}

function guess_fixes ()
{
    local rev="$1"
    local prefix
    local linerange
    local curfile
    local start
    local end
    local rest

    # The black art in the lines below does
    # the following:
    # - detect the original numbers of all
    #   code lines changed by a given revision;
    # - run git blame constrained to these lines
    #   on a revision that precedes the given;
    # - extract the last revision that touched
    #   these lines before the given;
    # - the set of these revisions would form
    #   the sef of Fixes trailers.
    while read -r prefix linerange rest; do
        case "${prefix}" in
            ---)
                curfile="${linerange#a/}"
                ;;
            @@)
                linerange="${linerange#-}"

                if [[ "${linerange}" == *,0 ]]; then
                    continue
                elif [[ "${linerange}" == *,* ]]; then
                    start="${linerange%%,*}"
                    end="${linerange##*,}"
                    end="$((start + end - 1))"
                else
                    start="${linerange}"
                    end="${linerange}"
                fi
                git blame -L"${start},${end}" "${rev}^" "${curfile}"
                ;;
        esac
    done < <(git diff -U0 "${rev}^" "${rev}") | cut -d' ' -f1 | sort -u
}

function add_guess_fixes ()
{
    local rev="$1"
    local fixrev

    [[ -z "${GUESS_FIXES}" ]] && return 0
    for fixrev in $(guess_fixes "${rev}"); do
        PATCH_TRAILER_ARGS+=("--where" "before" "--if-exists" "addIfDifferent"
                             "--trailer"
                             "Fixes=$(git log -1 --abbrev=12 \
                                          --format='%h ("%s")' "${fixrev}")")
    done
}

declare -A TRAILER_ORDER

# Non-trailer lines get the rank of 0.
#
# All other trailers get the rank of 1,
# this encompasses well-known semantic
# trailers such as Fixes as well as any
# unknown trailers.
#
# Signed-off-by from the committer gets
# the rank between other Signed-off-by and
# review trailers.

TRAILER_ORDER=(["Suggested-by"]=2
               ["Reported-by"]=2
               ["Signed-off-by"]=3
               ["Co-developed-by"]=3
               ["Reviewed-by"]=5
               ["Acked-by"]=5
               ["Tested-by"]=5)

function rank_commit_lines ()
{
    local rev="$1"
    local committer
    local prev_rank=0
    local before_trailers=true
    local after_empty_line=
    local rank
    local trailer

    committer="$(git log -1 --format='%cn <%ce>' "${rev}")"

    while read -r; do
        if [[ -z "${REPLY}" ]]; then
            prev_rank=0
            after_empty_line=true
        else
            [[ -n "${after_empty_line}" ]] && echo "0:"
            case "${REPLY}" in
                [[:space:]]*)
                    rank="${prev_rank}"
                    ;;
                [[:upper:]]*[[:lower:]]:\ *)
                    if [[ -n "${before_trailers}" && -z "${after_empty_line}" ]];
                    then
                        rank=0
                    elif [[ "${REPLY}" == "Signed-off-by: ${committer}" ]]; then
                        rank=4
                        before_trailers=
                    else
                        trailer="${REPLY%%:*}"
                        rank="${TRAILER_ORDER[${trailer}]:-1}"
                        before_trailers=
                    fi
                    ;;
                *)
                    rank=0
                    ;;
            esac
            after_empty_line=
            echo "${rank}:${REPLY}"
            prev_rank="${rank}"
        fi
    done | sort -t: -k1,1n -s | sed 's/^[0-9]*://'
}

for arg; do
    case "${arg}" in
        -h | --help)
            show_usage
            exit 0
            ;;
        --full-help)
            show_usage full
            exit 0
            ;;
        -1 | --single)
            SINGLE=true
            ;;
        -r*)
            username="$(maybe_copy_trailer Reviewed-by "${arg#-r}")"
            TRAILER_ARGS+=("--where" "end" "--if-exists" "addIfDifferent"
                           "--trailer"
                           "Reviewed-by=$(map_user "${username}")") || exit $?
            ;;
        --delete=*)
            TRAILER_ARGS+=("--if-exists" "replace" "--if-missing" "doNothing"
                           "--trim-empty" "--trailer" "${arg#--delete=}")
            ;;
        -d*)
            TRAILER_ARGS+=("--if-exists" "replace" "--if-missing" "doNothing"
                           "--trim-empty" "--trailer" "${arg#-d}")
            ;;
        --reviewed-by=* | --acked-by=* | --tested-by=*)
            trailer="${TRAILER_MAP[${arg%%=*}]}"
            username="$(maybe_copy_trailer "${trailer}" "${arg#--*=}")"

            TRAILER_ARGS+=("--where" "end" "--if-exists" "addIfDifferent"
                           "--trailer"
                           "${trailer}=$(map_user "${username}")") ||
                exit $?
            ;;
        --reported-by=* | --suggested-by=* )
            trailer="${TRAILER_MAP[${arg%%=*}]}"
            username="$(maybe_copy_trailer "${trailer}" "${arg#--*=}")"

            TRAILER_ARGS+=("--where" "start" "--if-exists" "replace"
                           "--trailer"
                           "${trailer}=$(map_user "${username}")") ||
                exit $?
            ;;
        -s | --signoff)
            TRAILER_ARGS+=("--where" "end" "--if-exists" "addIfDifferent"
                           "--trailer" "Signed-off-by=$(this_user)") ||
                exit $?
            ;;
        --coauthor=*)
            username="$(maybe_copy_trailer "Co-developed-by" "${arg#--*=}")"
            username="$(map_user "${username}")"
            TRAILER_ARGS+=("--where" "end" "--if-exists" "add"
                           "--trailer" "Co-developed-by=${username}"
                           "--trailer" "Signed-off-by=${username}") ||
                exit $?
            ;;
        --coauthor)
            TRAILER_ARGS+=("--where" "end" "--if-exists" "add"
                           "--trailer" "Co-developed-by=$(this_user)"
                           "--trailer" "Signed-off-by=$(this_user)") ||
                exit $?
            ;;
        --redmine-id=*)
            TRAILER_ARGS+=("--where" "start" "--if-exists" "replace"
                           "--trailer"
                           "OL-Redmine-Id=$(maybe_copy_trailer \
                                           OL-Redmine-Id "${arg##--redmine-id=}")")
            ;;
        --github-id=*)
            TRAILER_ARGS+=("--where" "start" "--if-exists" "replace"
                           "--trailer"
                           "GitHub-TE-Id=$(maybe_copy_trailer \
                                            GitHub-TE-Id "${arg##--github-id=}")")
            ;;
        --link=*)
            link="$(maybe_copy_trailer Link "${arg##--link=}")"
            case "${link}" in
                http://* | https://* )
                    true
                    ;;
                *)
                    echo "'${link}' does not look like a valid URL" >&2
                    exit 1
                    ;;
            esac
            TRAILER_ARGS+=("--where" "before" "--if-exists" "addIfDifferent"
                           "--trailer" "Link=${arg##--link=}")
            ;;
        --urgency=*)
            value="${arg#--urgency=}"
            case "${value}" in
                *:*)
                    level="${value%%:*}"
                    msg=" (${value#*:})"
                    ;;
                *)
                    level="${value}"
                    msg=""
                    ;;
            esac
            case "${level}" in
                low | medium | high | emergency | critical)
                    ;;
                *)
                    echo "invalid urgency level '${level}', must be one of:" >&2
                    echo "    low, medium, high, emergency, critical" >&2
                    exit 1
                    ;;
            esac
            TRAILER_ARGS+=("--where" "start" "--if-exists" "replace"
                           "--trailer" "Urgency: ${level}${msg}")
            ;;
        --breaks=*)
            SINGLE=true
            TRAILER_ARGS+=("--where" "start" "--if-exists" "replace"
                           "--trailer" "Breaks=${arg##--breaks=}")
            ;;
        --guess-fixes)
            GUESS_FIXES=true
            ;;
        --fixes=*)
            SINGLE=true
            line="$(git log -1 --abbrev=12 --format='%h ("%s")' \
                        "${arg#--fixes=}")" || exit $?
            TRAILER_ARGS+=("--where" "before" "--if-exists" "addIfDifferent"
                           "--trailer" "Fixes=${line}")
            ;;
        --fixes-private=*)
            SINGLE=true
            line="$(git log -1 --abbrev=12 --format='%h ("%s")' \
                        "${arg#--fixes-private=}")" || exit $?
            TRAILER_ARGS+=("--where" "before" "--if-exists" "addIfDifferent"
                           "--trailer" "Fixes-Private=${line}")
            ;;
        --ref=*)
            SINGLE=true
            commit="${arg#--ref=}"
            case "${commit}" in
                *:*/*@*\ \(\"*\"\))
                    line="${commit}"
                    ;;
                *)
                    line="$(git log -1 --abbrev=12 --format='%h ("%s")' \
                                "${commit}")" || exit $?
                    ;;
            esac
            TRAILER_ARGS+=("--where" "before" "--if-exists" "addIfDifferent"
                           "--trailer" "Ref=${line}")
            ;;
        --trailer=*:*)
            TRAILER_ARGS+=("--where" "end" "--if-exists" "add"
                           "--trailer" "${arg#--trailer=}")
            ;;
        --reorder)
            DO_REORDER=true
            ;;
        --stgit)
            USE_STGIT=true
            ;;
        --no-stgit)
            USE_STGIT=false
            ;;
        --no-ldap)
            USE_LDAP=false
            ;;
        --ldap)
            USE_LDAP=true
            ;;
        --dry-run | -n)
            DRYRUN="echo"
            ;;
        --verbose | -v)
            VERBOSE="true"
            ;;
        --abort)
            restore_branch 1
            ;;
        -*)
            echo "Unknown option ${arg}" >&2
            show_usage
            exit 1
            ;;
        *)
            PATCHES+=("${arg}")
            ;;
    esac
done

CHERRY_PICK_LINE_SEPARATOR='____'

function transform_trailers ()
{
    local rev="$1"
    local msg

    msg="$(git log -1 --format='%B' "${rev}")"

    # git interpret-trailer has an unfortunate and semi-documented feature,
    # that the line '(cherry picked from commit ...)' is effectively treated
    # as if it were a trailer line. This caused ol_patch_add_trailer to add
    # trailers to cherry-picked commits in a strange way.
    # Therefore an artificial separator is added after a cherry-pick line,
    # then trailers are processed and then the separator and all excessive
    # blank lines are deleted.

    msg="$(echo "${msg}" | \
           sed "s/^(cherry picked from commit [[:xdigit:]]*)\$/&\\n\\n${CHERRY_PICK_LINE_SEPARATOR}/" |
           git interpret-trailers "${TRAILER_ARGS[@]}" \
                                  "${PATCH_TRAILER_ARGS[@]}" | \
           sed "/^${CHERRY_PICK_LINE_SEPARATOR}\$/,\${ /^${CHERRY_PICK_LINE_SEPARATOR}\$/d; /^\$/d }")"

    if [[ -n "${DO_REORDER}" ]]; then
        echo "${msg}" | rank_commit_lines "${rev}"
    else
        echo "${msg}"
    fi
}

if [[ "${USE_STGIT}" == "true" ]]; then
    if [[ -z "$(stg series -A 2>/dev/null)" ]]; then
        verbose "No stgit patches"
        USE_STGIT=false
    fi
fi

if [[ "${USE_STGIT}" == "true" ]]; then

    function process_stgit ()
    {
        local p="$1"
        local rev
        verbose "Processing ${p}"

        rev="$(stg id "${p}")" || exit $?
        PATCH_TRAILER_ARGS=()
        add_guess_fixes "${rev}"

        ${DRYRUN} stg edit -m "$(transform_trailers "${rev}")" "${p}" || exit $?
    }

    if [[ -z "${PATCHES:+present}" ]]; then
        if [[ "${SINGLE}" == "true" ]]; then
            process_stgit "$(stg top)"
        else
            for p in $(stg series -A --noprefix); do
                process_stgit "${p}"
            done
        fi
    else
        for p in "${PATCHES[@]}"; do
            process_stgit "${p}"
        done
    fi

else
    if [[ -z "${PATCHES:+present}" ]]; then
        if [[ "${SINGLE}" == "true" ]]; then
            PATCHES=("HEAD")
        else
            PATCHES=("@{u}..HEAD")
        fi
    fi
    if ! ${DRYRUN} git tag add_trailer_oldhead HEAD; then
        echo "Trailer adding already in progress, use '$0 --abort' to cancel it" >&2
        exit 1
    fi
    trap "exit 1" INT
    trap "restore_branch \$?" EXIT

    lastrev=
    if [[ -z "${DRYRUN}" ]]; then
        headrev=add_trailer_oldhead
    else
        headrev=HEAD
    fi
    for rev in $(git rev-list --no-walk=sorted --reverse "${PATCHES[@]}"); do
        if ! git merge-base --is-ancestor "${rev}" "${headrev}";  then
            echo "Revision ${rev} is not part of the current branch" >&2
            exit 1
        fi

        if [[ -z "${lastrev}" ]]; then
            ${DRYRUN} git reset --hard "${rev}"
        else
            for skip in $(git rev-list --no-walk=sorted --reverse "${lastrev}..${rev}"); do
                verbose "Going to ${skip}"
                ${DRYRUN} git cherry-pick "${skip}" || exit $?
            done
        fi
        verbose "Processing ${rev}"
        PATCH_TRAILER_ARGS=()
        add_guess_fixes "${rev}"

        ${DRYRUN} git commit --amend -m "$(transform_trailers "${rev}")" || exit $?
        lastrev="${rev}"
    done
    for skip in $(git rev-list --no-walk=sorted --reverse "${lastrev}..${headrev}" 2>/dev/null); do
        verbose "Going to ${skip}"
        ${DRYRUN} git cherry-pick "${skip}" || exit $?
    done
fi
